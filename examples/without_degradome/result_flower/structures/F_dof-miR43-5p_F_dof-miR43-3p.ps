%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.5
%%CreationDate: Mon Jan 22 15:49:52 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAUUUUGUUUGAGCUUGUUGCAUUGACAACGAGAGAGAGCACGCUGGUUGGCGGCCAUGAACGCGGUCAUGACGGUUUACUUGCGUGCUCCCUCUCGCUGUCAUCCACUUCGCUCUACAAAAUGGCUG\
) def
/coor [
[110.60031891 549.68969727]
[121.67348480 538.64801025]
[120.21458435 523.71911621]
[118.75569153 508.79025269]
[117.29679871 493.86135864]
[115.83789825 478.93249512]
[114.37900543 464.00360107]
[112.92010498 449.07470703]
[103.74050140 441.09780884]
[102.45757294 428.60003662]
[110.31159210 418.28387451]
[109.21665955 403.32388306]
[108.12172699 388.36389160]
[107.02680206 373.40390015]
[93.05642700 370.32611084]
[80.51252747 363.41583252]
[70.42334747 353.22918701]
[63.61880875 340.59133911]
[60.66228485 326.52954102]
[61.80392456 312.18969727]
[66.95954895 298.74298096]
[75.71676636 287.29022217]
[87.36795807 278.77172852]
[100.96743774 273.89007568]
[100.23712158 258.90786743]
[99.50681305 243.92564392]
[98.77649689 228.94343567]
[98.04618073 213.96122742]
[89.69839478 201.62574768]
[96.75462341 187.46524048]
[96.02430725 172.48303223]
[95.29399872 157.50080872]
[94.56368256 142.51860046]
[93.83336639 127.53639221]
[93.10305023 112.55418396]
[85.69303894 100.69739532]
[91.91473389 88.17613220]
[91.18441772 73.19391632]
[90.45410919 58.21170807]
[89.72379303 43.22949600]
[88.99347687 28.24728775]
[88.26316833 13.26507664]
[87.53285217 -1.71713459]
[86.80253601 -16.69934464]
[78.40251160 -30.10644150]
[85.51097870 -43.19532776]
[84.78066254 -58.17753983]
[84.05035400 -73.15975189]
[75.65032959 -86.56684875]
[82.75879669 -99.65573883]
[82.02848053 -114.63794708]
[81.29816437 -129.62016296]
[72.89813995 -143.02725220]
[80.00660706 -156.11613464]
[71.60658264 -169.52323914]
[78.71504974 -182.61212158]
[77.98473358 -197.59432983]
[77.25441742 -212.57655334]
[76.52410889 -227.55876160]
[75.79379272 -242.54096985]
[63.92071152 -252.97195435]
[62.98439026 -268.74847412]
[73.54032135 -280.51062012]
[89.32586670 -281.28009033]
[100.97573853 -270.60040283]
[101.57827759 -254.80758667]
[90.77600098 -243.27128601]
[91.50631714 -228.28907776]
[92.23663330 -213.30685425]
[92.96694946 -198.32464600]
[93.69725800 -183.34243774]
[102.04504395 -171.00697327]
[94.98881531 -156.84645081]
[103.33660126 -144.51098633]
[96.28037262 -130.35046387]
[97.01068878 -115.36826324]
[97.74100494 -100.38604736]
[106.08879089 -88.05058289]
[99.03256226 -73.89006805]
[99.76287842 -58.90785599]
[100.49318695 -43.92564392]
[108.84097290 -31.59017563]
[101.78474426 -17.42965889]
[102.51506042 -2.44744873]
[103.24537659 12.53476238]
[103.97569275 27.51697350]
[104.70600128 42.49918365]
[105.43631744 57.48139572]
[106.16663361 72.46360779]
[106.89694977 87.44581604]
[114.30696106 99.30260468]
[108.08526611 111.82386780]
[108.81558228 126.80608368]
[109.54589081 141.78828430]
[110.27620697 156.77050781]
[111.00652313 171.75271606]
[111.73683167 186.73492432]
[120.13685608 200.14201355]
[113.02839661 213.23091125]
[113.75870514 228.21311951]
[114.48902130 243.19532776]
[115.21933746 258.17755127]
[115.94964600 273.15975952]
[131.18794250 277.22164917]
[144.41786194 285.76937866]
[154.35931396 297.96166992]
[160.05476379 312.60534668]
[160.96150208 328.27206421]
[157.00323486 343.43756104]
[148.57644653 356.63006592]
[136.51063538 366.57312012]
[121.98678589 372.30899048]
[123.08171082 387.26895142]
[124.17664337 402.22894287]
[125.27157593 417.18893433]
[135.97691345 432.11245728]
[127.84899139 447.61581421]
[129.30789185 462.54470825]
[130.76678467 477.47360229]
[132.22567749 492.40246582]
[133.68457031 507.33135986]
[135.14347839 522.26025391]
[136.60237122 537.18914795]
[149.60368347 545.87817383]
[153.92839050 560.90588379]
[147.53450012 575.17651367]
[133.44100952 581.95202637]
[118.30242920 578.03320312]
] def
/pairs [
[2 123]
[3 122]
[4 121]
[5 120]
[6 119]
[7 118]
[8 117]
[11 115]
[12 114]
[13 113]
[14 112]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[30 97]
[31 96]
[32 95]
[33 94]
[34 93]
[35 92]
[37 90]
[38 89]
[39 88]
[40 87]
[41 86]
[42 85]
[43 84]
[44 83]
[46 81]
[47 80]
[48 79]
[50 77]
[51 76]
[52 75]
[54 73]
[56 71]
[57 70]
[58 69]
[59 68]
[60 67]
] def

init

% Start Annotations
24 44 5 GREEN omark 85 105 5 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
