%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.5
%%CreationDate: Mon Jan 22 15:50:04 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
AAGAUUUUGUUUGAGCUUGUUGCAUUGACAACGAGAGAGAGCACGCUGGUUGGCGGCCUGAACCCGGUCAUGACUGUUUACUUGCGUGCUCCCUCUCGCUGUCAUCCACUUCGCUCUACAAAAUGGCUG\
) def
/coor [
[84.68859100 577.50927734]
[81.81395721 562.35211182]
[87.61142731 548.05548096]
[100.23106384 539.18145752]
[99.50636292 524.19897461]
[98.78166199 509.21649170]
[98.05696106 494.23400879]
[97.33226013 479.25152588]
[96.60755920 464.26904297]
[95.88285828 449.28656006]
[87.10633850 440.87002563]
[86.43695831 428.32574463]
[94.78514862 418.40695190]
[94.42269135 403.41134644]
[94.06023407 388.41571045]
[93.69777679 373.42010498]
[79.89546204 369.66357422]
[67.70494843 362.14932251]
[58.12586594 351.48297119]
[51.94672012 338.52896118]
[49.67995453 324.34066772]
[51.51948166 310.07455444]
[57.32413101 296.89611816]
[66.62842560 285.88452148]
[78.67990875 277.94427490]
[92.50000000 273.73095703]
[92.50000000 258.73095703]
[92.50000000 243.73094177]
[92.50000000 228.73094177]
[92.50000000 213.73094177]
[84.76270294 201.00367737]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[92.50000000 12.79650021]
[92.50000000 -2.20349932]
[92.50000000 -17.20349884]
[84.76270294 -31.00367165]
[92.50000000 -43.73094177]
[92.50000000 -58.73094177]
[92.50000000 -73.73094177]
[84.76270294 -87.53111267]
[92.50000000 -100.25838470]
[92.50000000 -115.25838470]
[92.50000000 -130.25839233]
[92.50000000 -145.25839233]
[92.50000000 -160.25839233]
[92.31875610 -175.25729370]
[84.25025177 -188.86647034]
[91.67775726 -201.77699280]
[91.31529999 -216.77261353]
[90.95284271 -231.76823425]
[79.33930206 -242.48742676]
[78.79038239 -258.28216553]
[89.63176727 -269.78173828]
[105.43144226 -270.16363525]
[116.81574249 -259.20129395]
[117.03057098 -243.39845276]
[105.94846344 -232.13069153]
[106.31092072 -217.13507080]
[106.67337799 -202.13945007]
[114.71595764 -189.60285950]
[107.31437683 -175.61975098]
[110.65489197 -168.94131470]
[107.50000000 -160.25839233]
[107.50000000 -145.25839233]
[107.50000000 -130.25839233]
[107.50000000 -115.25838470]
[107.50000000 -100.25838470]
[115.23729706 -87.53111267]
[107.50000000 -73.73094177]
[107.50000000 -58.73094177]
[107.50000000 -43.73094177]
[115.23729706 -31.00367165]
[107.50000000 -17.20349884]
[107.50000000 -2.20349932]
[107.50000000 12.79650021]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[115.23729706 201.00367737]
[107.50000000 213.73094177]
[107.50000000 228.73094177]
[107.50000000 243.73094177]
[107.50000000 258.73095703]
[107.50000000 273.73095703]
[122.52331543 278.53039551]
[135.32185364 287.71307373]
[144.65780640 300.37619019]
[149.63276672 315.28106689]
[149.77418518 330.97430420]
[145.08024597 345.92944336]
[136.01887512 358.69558716]
[123.48107147 368.03802490]
[108.69339752 373.05764771]
[109.05585480 388.05325317]
[109.41831207 403.04888916]
[109.78076935 418.04449463]
[119.74371338 433.47470093]
[110.86534119 448.56185913]
[111.59004211 463.54434204]
[112.31474304 478.52682495]
[113.03944397 493.50930786]
[113.76414490 508.49179077]
[114.48884583 523.47430420]
[115.21354675 538.45678711]
[128.63073730 546.07141113]
[135.78096008 559.74169922]
[134.38262939 575.10559082]
[124.88192749 587.26043701]
[110.31050873 592.32769775]
] def
/pairs [
[4 124]
[5 123]
[6 122]
[7 121]
[8 120]
[9 119]
[10 118]
[13 116]
[14 115]
[15 114]
[16 113]
[26 104]
[27 103]
[28 102]
[29 101]
[30 100]
[32 98]
[33 97]
[34 96]
[35 95]
[36 94]
[37 93]
[39 91]
[40 90]
[41 89]
[42 88]
[43 87]
[44 86]
[45 85]
[46 84]
[48 82]
[49 81]
[50 80]
[52 78]
[53 77]
[54 76]
[55 75]
[56 74]
[57 72]
[59 70]
[60 69]
[61 68]
] def

init

% Start Annotations
26 46 5 GREEN omark 86 106 5 RED omark 107 cmark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
