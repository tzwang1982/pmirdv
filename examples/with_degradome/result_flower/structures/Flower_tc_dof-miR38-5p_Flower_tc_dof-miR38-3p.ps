%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.5
%%CreationDate: Mon Jan 22 15:50:04 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
ACACAAAUUGGUUCUUGCAGCUCGCUCGCCUGUGUUCAUGGCCCAAUUUUAUGGUCCAAUGAAGGACCGGGACAAGGAAUGUAUAAAGGUGGACGAAAUGGAAGCACCGGUUUUCAAGGC\
) def
/coor [
[94.90184784 431.56454468]
[90.38250732 416.98587036]
[92.64466858 401.89132690]
[101.23918152 389.27795410]
[114.45960236 381.65014648]
[113.29241943 366.69561768]
[112.12523651 351.74111938]
[110.95806122 336.78659058]
[109.79087830 321.83206177]
[108.62370300 306.87753296]
[107.45652008 291.92303467]
[106.28933716 276.96850586]
[97.58516693 264.88186646]
[104.22518921 250.52148438]
[103.05800629 235.56697083]
[101.89083099 220.61244202]
[93.18665314 208.52581787]
[99.82667542 194.16543579]
[98.65949249 179.21090698]
[87.20816803 169.75561523]
[85.81144714 154.60623169]
[95.80667877 142.65913391]
[94.63949585 127.70461273]
[93.47232056 112.75009155]
[85.71948242 101.11457825]
[91.57315826 88.41709137]
[90.40598297 73.46257019]
[89.23880005 58.50804901]
[88.07162476 43.55352783]
[86.90444183 28.59900856]
[85.73725891 13.64448738]
[76.94960022 0.48821101]
[83.67311096 -12.80252743]
[82.50592804 -27.75704765]
[81.33874512 -42.71156693]
[72.55108643 -55.86784363]
[79.27459717 -69.15858459]
[78.10741425 -84.11310577]
[76.94023895 -99.06762695]
[67.61763000 -108.09510040]
[67.01569366 -120.65537262]
[74.91103363 -129.91966248]
[74.13247681 -144.89944458]
[61.11516190 -148.72460938]
[49.94812393 -156.38996887]
[41.72742081 -167.12590027]
[37.25457001 -179.86222839]
[36.95837784 -193.33494568]
[40.85390091 -206.21165466]
[48.54233932 -217.22329712]
[59.25183487 -225.28926086]
[71.91493225 -229.62339783]
[71.91493225 -244.62339783]
[71.91493225 -259.62338257]
[71.91493225 -274.62338257]
[71.91493225 -289.62338257]
[71.91493225 -304.62338257]
[60.56379318 -315.62008667]
[60.39670181 -331.42349243]
[71.51278687 -342.65771484]
[87.31707764 -342.65771484]
[98.43316650 -331.42349243]
[98.26607513 -315.62008667]
[86.91493225 -304.62338257]
[86.91493225 -289.62338257]
[86.91493225 -274.62338257]
[86.91493225 -259.62338257]
[86.91493225 -244.62339783]
[86.91493225 -229.62339783]
[102.35807037 -223.68186951]
[114.39624786 -212.27655029]
[121.19208527 -197.10997009]
[121.69374847 -180.46156311]
[115.79771423 -164.84512329]
[104.36854553 -152.62924194]
[89.11225128 -145.67800903]
[89.89080811 -130.69822693]
[100.23712921 -116.58775330]
[91.89476013 -100.23480225]
[93.06193542 -85.28028107]
[94.22911835 -70.32575989]
[102.93328857 -58.23913574]
[96.29326630 -43.87874985]
[97.46044922 -28.92422867]
[98.62763214 -13.96970749]
[107.33180237 -1.88307834]
[100.69178009 12.47730732]
[101.85896301 27.43182755]
[103.02614594 42.38634872]
[104.19332123 57.34086990]
[105.36050415 72.29538727]
[106.52767944 87.24990845]
[114.28051758 98.88542175]
[108.42684174 111.58290863]
[109.59401703 126.53742981]
[110.76119995 141.49194336]
[122.48901367 151.74359131]
[123.45966339 166.92622375]
[113.61401367 178.04373169]
[114.78119659 192.99824524]
[123.56885529 206.15452576]
[116.84534454 219.44526672]
[118.01252747 234.39978027]
[119.17971039 249.35430908]
[127.96736908 262.51058960]
[121.24385834 275.80133057]
[122.41104126 290.75582886]
[123.57822418 305.71035767]
[124.74539948 320.66488647]
[125.91258240 335.61941528]
[127.07975769 350.57391357]
[128.24693298 365.52844238]
[129.41412354 380.48297119]
[143.65791321 385.96722412]
[154.10534668 397.09439087]
[158.68206787 411.65518188]
[156.47937012 426.75851440]
[147.93458557 439.40563965]
[134.74430847 447.08541870]
[119.52746582 448.27307129]
] def
/pairs [
[5 113]
[6 112]
[7 111]
[8 110]
[9 109]
[10 108]
[11 107]
[12 106]
[14 104]
[15 103]
[16 102]
[18 100]
[19 99]
[22 96]
[23 95]
[24 94]
[26 92]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[33 85]
[34 84]
[35 83]
[37 81]
[38 80]
[39 79]
[42 77]
[43 76]
[52 69]
[53 68]
[54 67]
[55 66]
[56 65]
[57 64]
] def

init

% Start Annotations
22 40 5 GREEN omark 80 98 5 RED omark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
