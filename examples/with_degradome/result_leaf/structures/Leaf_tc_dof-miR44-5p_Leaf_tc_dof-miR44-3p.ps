%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.5
%%CreationDate: Mon Jan 22 15:51:25 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAGAUUAUUGGCUAGGAAAAAUUAUUUUGUGCGGAUUUCGGACUGUGUCCGGAGAUCAAUCAGAACGGGUCAUAUUACUUUUUCGCUCGGUACCAAGUGAUGUGACACGUUCUGGUUGAUCUCCGGACCAUCCGGUGUCCGCACAUAAUAG\
) def
/coor [
[13.97724724 396.86181641]
[16.53568268 411.71838379]
[15.46366310 426.75546265]
[10.82351303 441.09884644]
[2.88500524 453.91461182]
[-7.89032650 464.45764160]
[-20.87601852 472.11502075]
[-35.31709671 476.44149780]
[-50.37398148 477.18560791]
[-65.17127991 474.30404663]
[-78.84870148 467.96438599]
[-90.61105347 458.53512573]
[-99.77449036 446.56454468]
[-105.80626678 432.74859619]
[-108.35569000 417.89047241]
[-107.27455902 402.85400391]
[-102.62570953 388.51345825]
[-94.67943573 375.70251465]
[-83.89771271 365.16601562]
[-70.90737915 357.51651001]
[-56.46368408 353.19876099]
[-41.40634918 352.46380615]
[-26.61079979 355.35430908]
[-20.30276299 341.74517822]
[-13.99472523 328.13604736]
[-7.68668842 314.52691650]
[-9.35428047 299.72595215]
[3.46905231 290.45919800]
[9.77709007 276.85006714]
[16.08512688 263.24090576]
[22.39316368 249.63177490]
[28.70120239 236.02264404]
[35.00923920 222.41349792]
[41.31727600 208.80436707]
[47.62531281 195.19522095]
[53.93335342 181.58609009]
[52.26575851 166.78512573]
[65.08908844 157.51837158]
[71.39713287 143.90922546]
[77.70516968 130.30009460]
[84.01320648 116.69095612]
[90.32124329 103.08181763]
[90.59161377 94.97072601]
[96.90285492 89.25868225]
[103.49079895 75.78281403]
[104.46182251 66.63509369]
[110.35668945 62.09865189]
[117.22173309 48.76181793]
[124.08678436 35.42498398]
[130.95182800 22.08815002]
[137.81687927 8.75131607]
[144.68191528 -4.58551836]
[151.54696655 -17.92235184]
[158.41201782 -31.25918579]
[165.27705383 -44.59601974]
[172.14210510 -57.93285370]
[179.00715637 -71.26969147]
[185.87219238 -84.60652161]
[192.73724365 -97.94335938]
[199.60229492 -111.28018951]
[206.46733093 -124.61702728]
[213.33238220 -137.95385742]
[220.19743347 -151.29069519]
[227.06246948 -164.62753296]
[233.92752075 -177.96435547]
[240.79257202 -191.30119324]
[247.65760803 -204.63803101]
[247.09413147 -220.44920349]
[259.79843140 -228.22416687]
[266.66345215 -241.56100464]
[273.52850342 -254.89784241]
[280.39355469 -268.23468018]
[287.25860596 -281.57150269]
[294.12365723 -294.90832520]
[300.98870850 -308.24517822]
[307.85372925 -321.58200073]
[314.71878052 -334.91885376]
[321.58383179 -348.25567627]
[328.44888306 -361.59249878]
[335.31393433 -374.92935181]
[327.49505615 -389.89401245]
[330.08752441 -406.41021729]
[341.87908936 -418.02691650]
[358.10388184 -420.32574463]
[354.27563477 -435.90536499]
[364.18310547 -448.52365112]
[380.22613525 -448.50094604]
[390.09790039 -435.85467529]
[386.22558594 -420.28598022]
[371.57974243 -413.73779297]
[378.91711426 -402.54241943]
[379.75521851 -389.07443237]
[373.76696777 -376.86096191]
[362.42712402 -369.15393066]
[348.65075684 -368.06430054]
[341.78570557 -354.72747803]
[334.92068481 -341.39062500]
[328.05563354 -328.05380249]
[321.19058228 -314.71694946]
[314.32553101 -301.38012695]
[307.46047974 -288.04330444]
[300.59542847 -274.70645142]
[293.73040771 -261.36962891]
[286.86535645 -248.03279114]
[280.00030518 -234.69595337]
[273.13525391 -221.35913086]
[274.18975830 -206.50189209]
[260.99444580 -197.77297974]
[254.12939453 -184.43614197]
[247.26435852 -171.09931946]
[240.39930725 -157.76248169]
[233.53425598 -144.42564392]
[226.66921997 -131.08880615]
[219.80416870 -117.75197601]
[212.93911743 -104.41514587]
[206.07408142 -91.07830811]
[199.20903015 -77.74147797]
[192.34397888 -64.40464020]
[185.47894287 -51.06781006]
[178.61389160 -37.73097610]
[171.74884033 -24.39414024]
[164.88380432 -11.05730629]
[158.01875305 2.27952766]
[151.15370178 15.61636162]
[144.28866577 28.95319557]
[137.42361450 42.29003143]
[130.55856323 55.62686539]
[123.69352722 68.96369934]
[116.96666718 82.37076569]
[110.37871552 95.84662628]
[103.93038177 109.38985443]
[97.62234497 122.99899292]
[91.31430817 136.60812378]
[85.00627136 150.21726990]
[78.69823456 163.82641602]
[79.91462708 179.60078430]
[67.54248810 187.89411926]
[61.23445129 201.50326538]
[54.92641449 215.11239624]
[48.61837769 228.72154236]
[42.31034088 242.33067322]
[36.00230408 255.93981934]
[29.69426537 269.54895020]
[23.38622856 283.15808105]
[17.07819176 296.76724243]
[18.29459000 312.54159546]
[5.92245054 320.83493042]
[-0.38558665 334.44409180]
[-6.69362402 348.05322266]
[-13.00166130 361.66235352]
[-1.23359430 371.08447266]
] def
/pairs [
[23 150]
[24 149]
[25 148]
[26 147]
[28 145]
[29 144]
[30 143]
[31 142]
[32 141]
[33 140]
[34 139]
[35 138]
[36 137]
[38 135]
[39 134]
[40 133]
[41 132]
[42 131]
[44 130]
[45 129]
[47 128]
[48 127]
[49 126]
[50 125]
[51 124]
[52 123]
[53 122]
[54 121]
[55 120]
[56 119]
[57 118]
[58 117]
[59 116]
[60 115]
[61 114]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
[69 106]
[70 105]
[71 104]
[72 103]
[73 102]
[74 101]
[75 100]
[76 99]
[77 98]
[78 97]
[79 96]
[80 95]
[84 90]
] def

init

% Start Annotations
46 66 5 GREEN omark 111 131 5 RED omark 111 cmark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
