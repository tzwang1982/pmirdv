%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.5
%%CreationDate: Mon Jan 22 15:51:25 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAAGAGAAGAAGAAAACUUUAAUGAGGAGGUAUUGGCGUGCCUCAAUCUAAAGACAUGGCCGAGUUCUUCCUCAUCCAUGUUCUUGGCUUGAGCCGCGUCAAUAUCUCCUUUGAUACAAGCUCAUGCUUCUCUC\
) def
/coor [
[87.22708130 713.86181641]
[79.59867859 699.34497070]
[88.58403015 685.62652588]
[88.93306732 670.63061523]
[89.28209686 655.63464355]
[89.63113403 640.63873291]
[89.98017120 625.64276123]
[90.32920074 610.64685059]
[90.67823792 595.65087891]
[75.68354797 592.38073730]
[61.60365295 586.26239014]
[48.97404480 577.52673340]
[38.27543640 566.50396729]
[29.91545486 553.61151123]
[24.21313286 539.33813477]
[21.38672256 524.22528076]
[21.54533958 508.84649658]
[24.68475151 493.78604126]
[30.68748283 479.61627197]
[39.32719421 466.87600708]
[50.27722168 456.05023193]
[63.12294006 447.55136108]
[77.37744141 441.70367432]
[92.50000000 438.73095703]
[92.50000000 423.73095703]
[92.50000000 408.73095703]
[92.50000000 393.73095703]
[92.50000000 378.73095703]
[92.50000000 363.73095703]
[92.50000000 348.73095703]
[92.50000000 333.73095703]
[92.50000000 318.73095703]
[92.50000000 303.73095703]
[92.50000000 288.73095703]
[92.50000000 273.73095703]
[92.50000000 258.73095703]
[92.50000000 243.73094177]
[92.50000000 228.73094177]
[92.50000000 213.73094177]
[92.50000000 198.73094177]
[84.76270294 186.00367737]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[84.76270294 28.99632835]
[92.50000000 16.26905632]
[92.50000000 1.26905644]
[92.50000000 -13.73094368]
[92.50000000 -28.73094368]
[92.50000000 -43.73094177]
[92.50000000 -58.73094177]
[92.50000000 -73.73094177]
[81.60544586 -84.86406708]
[81.81912994 -100.07620239]
[92.50000000 -110.39388275]
[92.50000000 -125.39388275]
[92.50000000 -140.39389038]
[81.14886475 -151.39057922]
[80.98176575 -167.19398499]
[92.09785461 -178.42822266]
[107.90214539 -178.42822266]
[119.01823425 -167.19398499]
[118.85113525 -151.39057922]
[107.50000000 -140.39389038]
[107.50000000 -125.39388275]
[107.50000000 -110.39388275]
[118.18087006 -100.07620239]
[118.39455414 -84.86406708]
[107.50000000 -73.73094177]
[107.50000000 -58.73094177]
[107.50000000 -43.73094177]
[107.50000000 -28.73094368]
[107.50000000 -13.73094368]
[107.50000000 1.26905644]
[107.50000000 16.26905632]
[115.23729706 28.99632835]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[115.23729706 186.00367737]
[107.50000000 198.73094177]
[107.50000000 213.73094177]
[107.50000000 228.73094177]
[107.50000000 243.73094177]
[107.50000000 258.73095703]
[107.50000000 273.73095703]
[107.50000000 288.73095703]
[107.50000000 303.73095703]
[107.50000000 318.73095703]
[107.50000000 333.73095703]
[107.50000000 348.73095703]
[107.50000000 363.73095703]
[107.50000000 378.73095703]
[107.50000000 393.73095703]
[107.50000000 408.73095703]
[107.50000000 423.73095703]
[107.50000000 438.73095703]
[121.91808319 441.49533081]
[135.57292175 446.87554932]
[147.99450684 454.68481445]
[158.75558472 464.65267944]
[167.48634338 476.43450928]
[173.88711548 489.62338257]
[177.73873901 503.76409912]
[178.90991211 518.36895752]
[177.36180115 532.93457031]
[173.14930725 546.95904541]
[166.41903687 559.95959473]
[157.40429688 571.48889160]
[146.41696167 581.15051270]
[133.83666992 588.61267090]
[120.09774017 593.61950684]
[105.67417908 595.99993896]
[105.32514191 610.99584961]
[104.97610474 625.99182129]
[104.62707520 640.98773193]
[104.27803802 655.98370361]
[103.92900085 670.97961426]
[103.57997131 685.97558594]
[111.91733551 700.09716797]
] def
/pairs [
[3 133]
[4 132]
[5 131]
[6 130]
[7 129]
[8 128]
[9 127]
[24 111]
[25 110]
[26 109]
[27 108]
[28 107]
[29 106]
[30 105]
[31 104]
[32 103]
[33 102]
[34 101]
[35 100]
[36 99]
[37 98]
[38 97]
[39 96]
[40 95]
[42 93]
[43 92]
[44 91]
[45 90]
[46 89]
[48 87]
[49 86]
[50 85]
[51 84]
[53 82]
[54 81]
[55 80]
[56 79]
[57 78]
[58 77]
[59 76]
[62 73]
[63 72]
[64 71]
] def

init

% Start Annotations
28 48 5 GREEN omark 89 109 5 RED omark 89 cmark 49 cmark 110 cmark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
