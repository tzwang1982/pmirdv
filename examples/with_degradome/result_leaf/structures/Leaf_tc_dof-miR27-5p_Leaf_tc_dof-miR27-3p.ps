%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.5
%%CreationDate: Mon Jan 22 15:51:24 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGUUGGGCUCGGGGGUCCCGGCCCCGAACCCGUCGGCUGCUGGCGGAAUGCUCGAGCUGCUCGCGCGGCGAGAGCGGGCCGCCGC\
) def
/coor [
[92.85233307 108.63270569]
[78.01218414 110.81671906]
[63.17203522 113.00074005]
[48.47377396 115.99423981]
[33.96151733 119.78823853]
[19.44926071 123.58224487]
[4.93700552 127.37624359]
[-6.45741463 138.35247803]
[-20.72786331 134.08592224]
[-35.24011993 137.87991333]
[-49.75237656 141.67391968]
[-64.26463318 145.46792603]
[-78.77688599 149.26191711]
[-93.28913879 153.05592346]
[-99.82007599 167.26440430]
[-113.97811890 173.90396118]
[-129.07829285 169.83959961]
[-137.99073792 156.99038696]
[-136.50727844 141.42332458]
[-125.32835388 130.48870850]
[-109.73232269 129.34953308]
[-97.08314514 138.54367065]
[-82.57088470 134.74966431]
[-68.05863190 130.95567322]
[-53.54637527 127.16166687]
[-39.03411865 123.36766815]
[-24.52186394 119.57366180]
[-14.16545868 108.86879730]
[1.14300501 112.86399078]
[15.65526009 109.06998444]
[30.16751671 105.27598572]
[44.67977142 101.48198700]
[46.81124878 98.39278412]
[50.66211700 96.29122925]
[55.69528580 96.03002930]
[60.98801804 98.16059113]
[75.82817078 95.97657013]
[90.66831970 93.79255676]
[105.46610260 91.33786011]
[120.21659088 88.61330414]
[128.30921936 83.87583160]
[135.55491638 86.06894684]
[150.39506531 83.88492584]
[165.23521423 81.70091248]
[180.07536316 79.51689148]
[194.91551208 77.33287811]
[204.34373474 64.93342590]
[219.42486572 62.92992401]
[231.18774414 71.99470520]
[246.02789307 69.81069183]
[260.86804199 67.62667084]
[275.70819092 65.44265747]
[290.54833984 63.25864029]
[299.97656250 50.85918808]
[315.05770874 48.85569000]
[326.82058716 57.92047119]
[341.66073608 55.73645401]
[356.50088501 53.55243683]
[371.34103394 51.36841965]
[386.18118286 49.18440247]
[398.69515991 38.58570480]
[414.03741455 44.37770462]
[416.42517090 60.60209274]
[403.40206909 70.56861115]
[388.36520386 64.02455139]
[373.52505493 66.20857239]
[358.68490601 68.39258575]
[343.84475708 70.57660675]
[329.00460815 72.76062012]
[320.35202026 84.82994080]
[305.33309937 87.25624847]
[292.73236084 78.09879303]
[277.89221191 80.28280640]
[263.05206299 82.46682739]
[248.21191406 84.65084076]
[233.37176514 86.83486176]
[224.71917725 98.90417480]
[209.70027161 101.33048248]
[197.09953308 92.17302704]
[182.25938416 94.35704041]
[167.41923523 96.54106140]
[152.57908630 98.72508240]
[137.73892212 100.90909576]
[122.94113922 103.36379242]
[108.19065857 106.08834076]
] def
/pairs [
[1 38]
[2 37]
[3 36]
[4 32]
[5 31]
[6 30]
[7 29]
[9 27]
[10 26]
[11 25]
[12 24]
[13 23]
[14 22]
[39 85]
[40 84]
[42 83]
[43 82]
[44 81]
[45 80]
[46 79]
[49 76]
[50 75]
[51 74]
[52 73]
[53 72]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
] def

init

% Start Annotations
43 62 5 GREEN omark 65 84 5 RED omark 65 cmark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
