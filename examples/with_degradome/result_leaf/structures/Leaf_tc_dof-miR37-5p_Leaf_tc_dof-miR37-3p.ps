%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.5
%%CreationDate: Mon Jan 22 15:51:25 2018
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
RNAplot begin
% extra definitions for standard anotations
/min { 2 copy gt { exch } if pop } bind def
/BLACK { 0 0 0 } def
/RED   { 1 0 0 } def
/GREEN { 0 1 0 } def
/BLUE  { 0 0 1 } def
/WHITE { 1 1 1 } def
/LabelFont { % font size LabelFont
  exch findfont exch fsize mul scalefont setfont
} bind def
/Label { % i dx dy (text) Label
  % write text at base i plus offset dx, dy
  4 3 roll 1 sub coor exch get aload pop moveto
  3 1 roll fsize mul exch fsize mul exch rmoveto
  show
} bind def
/cmark { % i cmark   draw circle around base i
  newpath 1 sub coor exch get aload pop
  fsize 2 div 0 360 arc stroke
} bind def
/gmark { % i j c gmark
  % draw basepair i,j with c counter examples in gray
  gsave
  3 min [0 0.33 0.66 0.9] exch get setgray
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  1 sub dup coor exch get aload pop moveto
  sequence exch 1 getinterval cshow
  grestore
} bind def
/segmark { % f i j lw r g b segmark
  % mark segment [i,j] with outline width lw and color rgb
  % use omark and Fomark instead
  gsave
  setrgbcolor setlinewidth
  newpath
  1 sub exch 1 sub dup
  coor exch get aload pop moveto
  currentdict (cpr) known
  {
    3 -1 roll dup 4 1 roll dup
    {
      3 1 roll dup 3 -1 roll dup
      4 1 roll exch 5 2 roll exch
    }
    {
      3 1 roll exch
    } ifelse
    1 exch { coor exch get aload pop lineto } for
    {
      dup 3 1 roll 1 add exch 1 add arccoords pop pop
      4 2 roll 5 -1 roll coor exch get aload pop curveto
    } if
  }
  {
    exch 1 exch {
      coor exch get aload pop lineto
    } for
  } ifelse
  { closepath fill } if  stroke
  grestore
} bind def
/omark { % i j lw r g b omark
  % stroke segment [i..j] with linewidth lw, color rgb
  false 7 1 roll segmark
} bind def
/Fomark { % i j r g b Fomark
  % fill segment [i..j] with color rgb
  % should precede drawbases
  1 4 1 roll true 7 1 roll segmark
} bind def
/BFmark{ % i j k l r g b BFmark
  % fill block between pairs (i,j) and (k,l) with color rgb
  % should precede drawbases
  gsave
  setrgbcolor
  newpath
  currentdict (cpr) known
  {
    dup 1 sub coor exch get aload pop moveto % move to l
    dup 1 sub 4 -1 roll dup 5 1 roll 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from l to j
    3 -1 roll 4 -1 roll dup 5 1 roll arccoords curveto % curve from j to i
    exch dup 4 -1 roll 1 sub exch 1 sub 1 exch
    { coor exch get aload pop lineto } for % lines from i to k
    exch arccoords curveto% curve from k to l
  }
  {  exch 4 3 roll exch 1 sub exch 1 sub dup
     coor exch get aload pop moveto
     exch 1 exch { coor exch get aload pop lineto } for
     exch 1 sub exch 1 sub dup
     coor exch get aload pop lineto
     exch 1 exch { coor exch get aload pop lineto } for
  } ifelse
    closepath fill stroke
   grestore
} bind def
/hsb {
  dup 0.3 mul 1 exch sub sethsbcolor
} bind def
/colorpair { % i j hue sat colorpair
  % draw basepair i,j in color
  % 1 index 0.00 ne {
  gsave
  newpath
  hsb
  fsize setlinewidth
  currentdict (cpr) known
  {
    exch dup
    coor  exch 1 sub get aload pop moveto
    exch arccoords curveto
  }
  { 1 sub coor exch get aload pop moveto
    1 sub coor exch get aload pop lineto
  } ifelse
   stroke
   grestore
   % } if
} bind def
end

%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAUUUUGUUUGAGCUUGUUGCAUUGACAACGAGAGAGAGCACGCUGGUUGGCGGCCUGAACCCGGUCAUGACUGUUUACUUGCGUGCUCCCUCUCGCUGUCAUCCACUUCGCUCUACAAAAUGGCU\
) def
/coor [
[100.77220917 550.84967041]
[111.27677917 539.04162598]
[110.16463470 524.08294678]
[109.05249786 509.12420654]
[107.94035339 494.16549683]
[106.82821655 479.20678711]
[105.71607208 464.24807739]
[104.60392761 449.28933716]
[95.61042786 441.09930420]
[94.62010193 428.57226562]
[102.71649170 418.44171143]
[101.97468567 403.46005249]
[101.23287964 388.47842407]
[100.49107361 373.49676514]
[86.59523010 370.08959961]
[74.21642303 362.88363647]
[64.36986542 352.45947266]
[57.86605835 339.66192627]
[55.24405670 325.53179932]
[56.72681808 311.22113037]
[62.20226288 297.89920044]
[71.23170471 286.65713501]
[83.08496094 278.41848755]
[96.79943085 273.86331177]
[96.42841339 258.86788940]
[96.05739594 243.87248230]
[95.68637848 228.87705994]
[95.31536102 213.88165283]
[87.26563263 201.34965515]
[94.65922546 187.36233521]
[94.28820801 172.36691284]
[93.91719055 157.37150574]
[93.54617310 142.37609863]
[93.17515564 127.38068390]
[92.80413818 112.38527679]
[85.68043518 100.35429382]
[92.20044708 87.98574066]
[91.82942963 72.99033356]
[91.45841217 57.99491882]
[91.08740234 42.99951172]
[90.71638489 28.00409889]
[90.34536743 13.00868797]
[89.97434998 -1.98672271]
[89.60333252 -16.98213387]
[81.52706146 -30.58670616]
[88.94718933 -43.50146103]
[88.57617188 -58.49687195]
[88.20516205 -73.49228668]
[80.12888336 -87.09685516]
[87.54901886 -100.01161194]
[87.17800140 -115.00702667]
[86.80698395 -130.00244141]
[86.43596649 -144.99784851]
[86.06494904 -159.99325562]
[85.50849915 -174.98292542]
[77.09819794 -188.38357544]
[84.19661713 -201.47792053]
[83.45481110 -216.45956421]
[82.71300507 -231.44120789]
[70.83193207 -241.86308289]
[69.88350677 -257.63888550]
[80.43041229 -269.40911865]
[96.21536255 -270.19070435]
[107.87342834 -259.51992798]
[108.48807526 -243.72760010]
[97.69465637 -232.18301392]
[98.43645477 -217.20137024]
[99.17826080 -202.21972656]
[107.53550720 -189.89065552]
[100.49014282 -175.72473145]
[104.00093842 -169.12886047]
[101.06036377 -160.36427307]
[101.43138123 -145.36886597]
[101.80239868 -130.37344360]
[102.17341614 -115.37803650]
[102.54442596 -100.38262939]
[110.59416199 -87.85063171]
[103.20056915 -73.86329651]
[103.57158661 -58.86788940]
[103.94260406 -43.87247849]
[111.99234009 -31.34047890]
[104.59874725 -17.35314941]
[104.96975708 -2.35773921]
[105.34077454 12.63767147]
[105.71179199 27.63308334]
[106.08280945 42.62849426]
[106.45382690 57.62390518]
[106.82484436 72.61931610]
[107.19586182 87.61472321]
[114.31956482 99.64570618]
[107.79955292 112.01425934]
[108.17057037 127.00966644]
[108.54158783 142.00508118]
[108.91259766 157.00048828]
[109.28361511 171.99589539]
[109.65463257 186.99131775]
[117.73090363 200.59588623]
[110.31077576 213.51063538]
[110.68179321 228.50605774]
[111.05281067 243.50146484]
[111.42382812 258.49688721]
[111.79483795 273.49227905]
[126.92962646 277.91735840]
[139.94982910 286.77777100]
[149.59634399 299.20227051]
[154.94073486 313.97564697]
[155.47463989 329.65753174]
[151.15808105 344.72296143]
[142.42218018 357.71051025]
[130.12612915 367.36422729]
[115.47271729 372.75494385]
[116.21452332 387.73660278]
[116.95632935 402.71826172]
[117.69813538 417.69989014]
[128.04890442 432.86914062]
[119.56264496 448.17721558]
[120.67478943 463.13592529]
[121.78692627 478.09463501]
[122.89907074 493.05334473]
[124.01120758 508.01205444]
[125.12335205 522.97076416]
[126.23549652 537.92950439]
[138.37071228 548.05432129]
[139.70906067 563.80181885]
[129.45649719 575.82934570]
[113.69570923 577.00109863]
] def
/pairs [
[2 122]
[3 121]
[4 120]
[5 119]
[6 118]
[7 117]
[8 116]
[11 114]
[12 113]
[13 112]
[14 111]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[30 96]
[31 95]
[32 94]
[33 93]
[34 92]
[35 91]
[37 89]
[38 88]
[39 87]
[40 86]
[41 85]
[42 84]
[43 83]
[44 82]
[46 80]
[47 79]
[48 78]
[50 76]
[51 75]
[52 74]
[53 73]
[54 72]
[55 70]
[57 68]
[58 67]
[59 66]
] def

init

% Start Annotations
24 44 5 GREEN omark 84 104 5 RED omark 24 cmark 84 cmark 105 cmark
% End Annotations
% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
